// Package rapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package rapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

type contextKey string

const (
	BearerAuthScopes contextKey = "BearerAuth.Scopes"
)

// Category defines model for Category.
type Category struct {
	Code      string              `json:"code"`
	CreatedAt time.Time           `json:"createdAt"`
	ID        uint                `json:"id"`
	Name      string              `json:"name"`
	Relations *[]CategoryRelation `json:"relations,omitempty"`
	TypeCode  string              `json:"typeCode"`
	TypeID    uint                `json:"typeID"`
	UpdatedAt *time.Time          `json:"updatedAt"`
}

// CategoryRelation defines model for CategoryRelation.
type CategoryRelation struct {
	CategoryCode string     `json:"categoryCode"`
	CategoryID   uint       `json:"categoryID"`
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    *time.Time `json:"updatedAt"`
}

// Comic defines model for Comic.
type Comic struct {
	Additionals   map[string]interface{} `json:"additionals"`
	Categories    *[]Category            `json:"categories,omitempty"`
	Chapters      *[]ComicChapter        `json:"chapters,omitempty"`
	Code          string                 `json:"code"`
	Covers        *[]ComicCover          `json:"covers,omitempty"`
	CreatedAt     time.Time              `json:"createdAt"`
	Externals     *[]ComicExternal       `json:"externals,omitempty"`
	ID            uint                   `json:"id"`
	LanguageID    *uint                  `json:"languageID"`
	LanguageIETF  *string                `json:"languageIETF"`
	NSFL          *int                   `json:"nsfl"`
	NSFW          *int                   `json:"nsfw"`
	PublishedFrom *time.Time             `json:"publishedFrom"`
	PublishedTo   *time.Time             `json:"publishedTo"`
	Relations     *[]ComicRelation       `json:"relations,omitempty"`
	Synopses      *[]ComicSynopsis       `json:"synopses,omitempty"`
	Tags          *[]Tag                 `json:"tags,omitempty"`
	Titles        *[]ComicTitle          `json:"titles,omitempty"`
	TotalChapter  *int                   `json:"totalChapter"`
	TotalVolume   *int                   `json:"totalVolume"`
	UpdatedAt     *time.Time             `json:"updatedAt"`
}

// ComicCategory defines model for ComicCategory.
type ComicCategory struct {
	CategoryCode   string     `json:"categoryCode"`
	CategoryID     uint       `json:"categoryID"`
	CategoryTypeID uint       `json:"categoryTypeID"`
	CreatedAt      time.Time  `json:"createdAt"`
	UpdatedAt      *time.Time `json:"updatedAt"`
}

// ComicChapter defines model for ComicChapter.
type ComicChapter struct {
	Chapter    string     `json:"chapter"`
	CreatedAt  time.Time  `json:"createdAt"`
	ID         uint       `json:"id"`
	ReleasedAt time.Time  `json:"releasedAt"`
	UpdatedAt  *time.Time `json:"updatedAt"`
	Version    *string    `json:"version"`
	Volume     *string    `json:"volume"`
}

// ComicCover defines model for ComicCover.
type ComicCover struct {
	CreatedAt     time.Time  `json:"createdAt"`
	ID            uint       `json:"id"`
	Priority      *int       `json:"priority"`
	RelativeURL   string     `json:"relativeURL"`
	RID           string     `json:"rid"`
	UpdatedAt     *time.Time `json:"updatedAt"`
	WebsiteDomain string     `json:"websiteDomain"`
	WebsiteID     uint       `json:"websiteID"`
}

// ComicExternal defines model for ComicExternal.
type ComicExternal struct {
	CreatedAt     time.Time  `json:"createdAt"`
	ID            uint       `json:"id"`
	Official      *bool      `json:"official"`
	RelativeURL   *string    `json:"relativeURL"`
	RID           string     `json:"rid"`
	UpdatedAt     *time.Time `json:"updatedAt"`
	WebsiteDomain string     `json:"websiteDomain"`
	WebsiteID     uint       `json:"websiteID"`
}

// ComicRelation defines model for ComicRelation.
type ComicRelation struct {
	ComicCode string     `json:"comicCode"`
	ComicID   uint       `json:"comicID"`
	CreatedAt time.Time  `json:"createdAt"`
	TypeCode  *string    `json:"typeCode,omitempty"`
	TypeID    uint       `json:"typeID"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// ComicSynopsis defines model for ComicSynopsis.
type ComicSynopsis struct {
	CreatedAt    time.Time  `json:"createdAt"`
	ID           uint       `json:"id"`
	LanguageID   uint       `json:"languageID"`
	LanguageIETF string     `json:"languageIETF"`
	RID          string     `json:"rid"`
	Romanized    *bool      `json:"romanized"`
	Synopsis     string     `json:"synopsis"`
	UpdatedAt    *time.Time `json:"updatedAt"`
	Version      *string    `json:"version"`
}

// ComicTag defines model for ComicTag.
type ComicTag struct {
	CreatedAt time.Time  `json:"createdAt"`
	TagCode   string     `json:"tagCode"`
	TagID     uint       `json:"tagID"`
	TagTypeID uint       `json:"tagTypeID"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// ComicTitle defines model for ComicTitle.
type ComicTitle struct {
	CreatedAt    time.Time  `json:"createdAt"`
	ID           uint       `json:"id"`
	LanguageID   uint       `json:"languageID"`
	LanguageIETF string     `json:"languageIETF"`
	RID          string     `json:"rid"`
	Romanized    *bool      `json:"romanized"`
	Synonym      *bool      `json:"synonym"`
	Title        string     `json:"title"`
	UpdatedAt    *time.Time `json:"updatedAt"`
}

// Error defines model for Error.
type Error struct {
	Error struct {
		Message string `json:"message"`
		Status  string `json:"status"`
	} `json:"error"`
}

// GenericType defines model for GenericType.
type GenericType struct {
	Code      string     `json:"code"`
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// Language defines model for Language.
type Language struct {
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	IETF      string     `json:"ietf"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// NewCategory defines model for NewCategory.
type NewCategory struct {
	Code     string  `form:"code" json:"code"`
	Name     string  `form:"name" json:"name"`
	TypeCode *string `form:"typeCode" json:"typeCode"`
	TypeID   *uint   `form:"typeID" json:"typeID"`
}

// NewCategoryRelation defines model for NewCategoryRelation.
type NewCategoryRelation struct {
	CategoryCode *string `form:"categoryCode" json:"categoryCode"`
	CategoryID   *uint   `form:"categoryID" json:"categoryID"`
}

// NewComic defines model for NewComic.
type NewComic struct {
	Code          *string    `form:"code" json:"code"`
	LanguageID    *uint      `form:"languageID" json:"languageID"`
	LanguageIETF  *string    `form:"languageIETF" json:"languageIETF"`
	NSFL          *int       `form:"nsfl" json:"nsfl"`
	NSFW          *int       `form:"nsfw" json:"nsfw"`
	PublishedFrom *time.Time `form:"publishedFrom" json:"publishedFrom"`
	PublishedTo   *time.Time `form:"publishedTo" json:"publishedTo"`
	TotalChapter  *int       `form:"totalChapter" json:"totalChapter"`
	TotalVolume   *int       `form:"totalVolume" json:"totalVolume"`
}

// NewComicCategory defines model for NewComicCategory.
type NewComicCategory struct {
	CategoryCode     *string `form:"categoryCode" json:"categoryCode"`
	CategoryID       *uint   `form:"categoryID" json:"categoryID"`
	CategoryTypeCode *string `form:"categoryTypeCode" json:"categoryTypeCode"`
	CategoryTypeID   *uint   `form:"categoryTypeID" json:"categoryTypeID"`
}

// NewComicChapter defines model for NewComicChapter.
type NewComicChapter struct {
	Chapter    string    `form:"chapter" json:"chapter"`
	ReleasedAt time.Time `form:"releasedAt" json:"releasedAt"`
	Version    *string   `form:"version" json:"version"`
	Volume     *string   `form:"volume" json:"volume"`
}

// NewComicCover defines model for NewComicCover.
type NewComicCover struct {
	Priority      *int    `form:"priority" json:"priority"`
	RelativeURL   string  `form:"relativeURL" json:"relativeURL"`
	RID           *string `form:"rid" json:"rid"`
	WebsiteDomain *string `form:"websiteDomain" json:"websiteDomain"`
	WebsiteID     *uint   `form:"websiteID" json:"websiteID"`
}

// NewComicExternal defines model for NewComicExternal.
type NewComicExternal struct {
	Official      *bool   `form:"official" json:"official"`
	RelativeURL   *string `form:"relativeURL" json:"relativeURL"`
	RID           *string `form:"rid" json:"rid"`
	WebsiteDomain *string `form:"websiteDomain" json:"websiteDomain"`
	WebsiteID     *uint   `form:"websiteID" json:"websiteID"`
}

// NewComicRelation defines model for NewComicRelation.
type NewComicRelation struct {
	ComicCode *string `form:"comicCode" json:"comicCode"`
	ComicID   *uint   `form:"comicID" json:"comicID"`
	TypeCode  *string `form:"typeCode" json:"typeCode"`
	TypeID    *uint   `form:"typeID" json:"typeID"`
}

// NewComicSynopsis defines model for NewComicSynopsis.
type NewComicSynopsis struct {
	LanguageID   *uint   `form:"languageID" json:"languageID"`
	LanguageIETF *string `form:"languageIETF" json:"languageIETF"`
	RID          *string `form:"rid" json:"rid"`
	Romanized    *bool   `form:"romanized" json:"romanized"`
	Synopsis     string  `form:"synopsis" json:"synopsis"`
	Version      *string `form:"version" json:"version"`
}

// NewComicTag defines model for NewComicTag.
type NewComicTag struct {
	TagCode     *string `form:"tagCode" json:"tagCode"`
	TagID       *uint   `form:"tagID" json:"tagID"`
	TagTypeCode *string `form:"tagTypeCode" json:"tagTypeCode"`
	TagTypeID   *uint   `form:"tagTypeID" json:"tagTypeID"`
}

// NewComicTitle defines model for NewComicTitle.
type NewComicTitle struct {
	LanguageID   *uint   `form:"languageID" json:"languageID"`
	LanguageIETF *string `form:"languageIETF" json:"languageIETF"`
	RID          *string `form:"rid" json:"rid"`
	Romanized    *bool   `form:"romanized" json:"romanized"`
	Synonym      *bool   `form:"synonym" json:"synonym"`
	Title        string  `form:"title" json:"title"`
}

// NewGenericType defines model for NewGenericType.
type NewGenericType struct {
	Code string `form:"code" json:"code"`
	Name string `form:"name" json:"name"`
}

// NewLanguage defines model for NewLanguage.
type NewLanguage struct {
	IETF string `form:"ietf" json:"ietf"`
	Name string `form:"name" json:"name"`
}

// NewTag defines model for NewTag.
type NewTag struct {
	Code     string  `form:"code" json:"code"`
	Name     string  `form:"name" json:"name"`
	TypeCode *string `form:"typeCode" json:"typeCode"`
	TypeID   *uint   `form:"typeID" json:"typeID"`
}

// NewWebsite defines model for NewWebsite.
type NewWebsite struct {
	Domain string `form:"domain" json:"domain"`
	Name   string `form:"name" json:"name"`
}

// Object defines model for Object.
type Object struct {
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// SetCategory defines model for SetCategory.
type SetCategory struct {
	Code     *string `form:"code" json:"code"`
	Name     *string `form:"name" json:"name"`
	TypeCode *string `form:"typeCode" json:"typeCode"`
	TypeID   *uint   `form:"typeID" json:"typeID"`
}

// SetCategoryRelation defines model for SetCategoryRelation.
type SetCategoryRelation struct {
	CategoryCode *string `form:"categoryCode" json:"categoryCode"`
	CategoryID   *uint   `form:"categoryID" json:"categoryID"`
}

// SetComic defines model for SetComic.
type SetComic struct {
	Code          *string    `form:"code" json:"code"`
	LanguageID    *uint      `form:"languageID" json:"languageID"`
	LanguageIETF  *string    `form:"languageIETF" json:"languageIETF"`
	NSFL          *int       `form:"nsfl" json:"nsfl"`
	NSFW          *int       `form:"nsfw" json:"nsfw"`
	PublishedFrom *time.Time `form:"publishedFrom" json:"publishedFrom"`
	PublishedTo   *time.Time `form:"publishedTo" json:"publishedTo"`
	SetNull       []string   `form:"setNull,omitempty" json:"setNull,omitempty"`
	TotalChapter  *int       `form:"totalChapter" json:"totalChapter"`
	TotalVolume   *int       `form:"totalVolume" json:"totalVolume"`
}

// SetComicCategory defines model for SetComicCategory.
type SetComicCategory struct {
	CategoryCode     *string `form:"categoryCode" json:"categoryCode"`
	CategoryID       *uint   `form:"categoryID" json:"categoryID"`
	CategoryTypeCode *string `form:"categoryTypeCode" json:"categoryTypeCode"`
	CategoryTypeID   *uint   `form:"categoryTypeID" json:"categoryTypeID"`
}

// SetComicChapter defines model for SetComicChapter.
type SetComicChapter struct {
	Chapter    *string    `form:"chapter" json:"chapter"`
	ReleasedAt *time.Time `form:"releasedAt" json:"releasedAt"`
	SetNull    []string   `form:"setNull,omitempty" json:"setNull,omitempty"`
	Version    *string    `form:"version" json:"version"`
	Volume     *string    `form:"volume" json:"volume"`
}

// SetComicCover defines model for SetComicCover.
type SetComicCover struct {
	Priority      *int     `form:"priority" json:"priority"`
	RelativeURL   *string  `form:"relativeURL" json:"relativeURL"`
	RID           *string  `form:"rid" json:"rid"`
	SetNull       []string `form:"setNull,omitempty" json:"setNull,omitempty"`
	WebsiteDomain *string  `form:"websiteDomain" json:"websiteDomain"`
	WebsiteID     *uint    `form:"websiteID" json:"websiteID"`
}

// SetComicExternal defines model for SetComicExternal.
type SetComicExternal struct {
	Official      *bool    `form:"official" json:"official"`
	RelativeURL   *string  `form:"relativeURL" json:"relativeURL"`
	RID           *string  `form:"rid" json:"rid"`
	SetNull       []string `form:"setNull,omitempty" json:"setNull,omitempty"`
	WebsiteDomain *string  `form:"websiteDomain" json:"websiteDomain"`
	WebsiteID     *uint    `form:"websiteID" json:"websiteID"`
}

// SetComicRelation defines model for SetComicRelation.
type SetComicRelation struct {
	ComicCode *string `form:"comicCode" json:"comicCode"`
	ComicID   *uint   `form:"comicID" json:"comicID"`
	TypeCode  *string `form:"typeCode" json:"typeCode"`
	TypeID    *uint   `form:"typeID" json:"typeID"`
}

// SetComicSynopsis defines model for SetComicSynopsis.
type SetComicSynopsis struct {
	LanguageID   *uint    `form:"languageID" json:"languageID"`
	LanguageIETF *string  `form:"languageIETF" json:"languageIETF"`
	RID          *string  `form:"rid" json:"rid"`
	Romanized    *bool    `form:"version" json:"romanized"`
	SetNull      []string `form:"setNull,omitempty" json:"setNull,omitempty"`
	Synopsis     *string  `form:"synopsis" json:"synopsis"`
	Version      *string  `form:"version" json:"version"`
}

// SetComicTag defines model for SetComicTag.
type SetComicTag struct {
	TagCode     *string `form:"tagCode" json:"tagCode"`
	TagID       *uint   `form:"tagID" json:"tagID"`
	TagTypeCode *string `form:"tagTypeCode" json:"tagTypeCode"`
	TagTypeID   *uint   `form:"tagTypeID" json:"tagTypeID"`
}

// SetComicTitle defines model for SetComicTitle.
type SetComicTitle struct {
	LanguageID   *uint    `form:"languageID" json:"languageID"`
	LanguageIETF *string  `form:"languageIETF" json:"languageIETF"`
	RID          *string  `form:"rid" json:"rid"`
	Romanized    *bool    `form:"romanized" json:"romanized"`
	SetNull      []string `form:"setNull,omitempty" json:"setNull,omitempty"`
	Synonym      *bool    `form:"synonym" json:"synonym"`
	Title        *string  `form:"title" json:"title"`
}

// SetGenericType defines model for SetGenericType.
type SetGenericType struct {
	Code *string `form:"code" json:"code"`
	Name *string `form:"name" json:"name"`
}

// SetLanguage defines model for SetLanguage.
type SetLanguage struct {
	IETF *string `form:"ietf" json:"ietf"`
	Name *string `form:"name" json:"name"`
}

// SetTag defines model for SetTag.
type SetTag struct {
	Code     *string `form:"code" json:"code"`
	Name     *string `form:"name" json:"name"`
	TypeCode *string `form:"typeCode" json:"typeCode"`
	TypeID   *uint   `form:"typeID" json:"typeID"`
}

// SetWebsite defines model for SetWebsite.
type SetWebsite struct {
	Domain *string `form:"domain" json:"domain"`
	Name   *string `form:"name" json:"name"`
}

// Tag defines model for Tag.
type Tag struct {
	Code      string     `json:"code"`
	CreatedAt time.Time  `json:"createdAt"`
	ID        uint       `json:"id"`
	Name      string     `json:"name"`
	TypeCode  string     `json:"typeCode"`
	TypeID    uint       `json:"typeID"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// Website defines model for Website.
type Website struct {
	CreatedAt time.Time  `json:"createdAt"`
	Domain    string     `json:"domain"`
	ID        uint       `json:"id"`
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

// Default defines model for Default.
type Default = Error

// ListCategoryParams defines parameters for ListCategory.
type ListCategoryParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListComicParams defines parameters for ListComic.
type ListComicParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// ComicExternal Filter by comic external values.
	ComicExternal *[]string `form:"comic_external,omitempty" json:"comic_external,omitempty"`
}

// ListComicChapterParams defines parameters for ListComicChapter.
type ListComicChapterParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListLanguageParams defines parameters for ListLanguage.
type ListLanguageParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListTagParams defines parameters for ListTag.
type ListTagParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListCategoryTypeParams defines parameters for ListCategoryType.
type ListCategoryTypeParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListComicRelationTypeParams defines parameters for ListComicRelationType.
type ListComicRelationTypeParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListTagTypeParams defines parameters for ListTagType.
type ListTagTypeParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// ListWebsiteParams defines parameters for ListWebsite.
type ListWebsiteParams struct {
	// Page Page number of results.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Maximum number of results.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy Sort results returned.
	OrderBy *[]string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// AddCategoryJSONRequestBody defines body for AddCategory for application/json ContentType.
type AddCategoryJSONRequestBody = NewCategory

// AddCategoryFormdataRequestBody defines body for AddCategory for application/x-www-form-urlencoded ContentType.
type AddCategoryFormdataRequestBody = NewCategory

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = SetCategory

// UpdateCategoryFormdataRequestBody defines body for UpdateCategory for application/x-www-form-urlencoded ContentType.
type UpdateCategoryFormdataRequestBody = SetCategory

// AddCategoryRelationJSONRequestBody defines body for AddCategoryRelation for application/json ContentType.
type AddCategoryRelationJSONRequestBody = NewCategoryRelation

// AddCategoryRelationFormdataRequestBody defines body for AddCategoryRelation for application/x-www-form-urlencoded ContentType.
type AddCategoryRelationFormdataRequestBody = NewCategoryRelation

// UpdateCategoryRelationJSONRequestBody defines body for UpdateCategoryRelation for application/json ContentType.
type UpdateCategoryRelationJSONRequestBody = SetCategoryRelation

// UpdateCategoryRelationFormdataRequestBody defines body for UpdateCategoryRelation for application/x-www-form-urlencoded ContentType.
type UpdateCategoryRelationFormdataRequestBody = SetCategoryRelation

// AddComicJSONRequestBody defines body for AddComic for application/json ContentType.
type AddComicJSONRequestBody = NewComic

// AddComicFormdataRequestBody defines body for AddComic for application/x-www-form-urlencoded ContentType.
type AddComicFormdataRequestBody = NewComic

// UpdateComicJSONRequestBody defines body for UpdateComic for application/json ContentType.
type UpdateComicJSONRequestBody = SetComic

// UpdateComicFormdataRequestBody defines body for UpdateComic for application/x-www-form-urlencoded ContentType.
type UpdateComicFormdataRequestBody = SetComic

// AddComicCategoryJSONRequestBody defines body for AddComicCategory for application/json ContentType.
type AddComicCategoryJSONRequestBody = NewComicCategory

// AddComicCategoryFormdataRequestBody defines body for AddComicCategory for application/x-www-form-urlencoded ContentType.
type AddComicCategoryFormdataRequestBody = NewComicCategory

// UpdateComicCategoryJSONRequestBody defines body for UpdateComicCategory for application/json ContentType.
type UpdateComicCategoryJSONRequestBody = SetComicCategory

// UpdateComicCategoryFormdataRequestBody defines body for UpdateComicCategory for application/x-www-form-urlencoded ContentType.
type UpdateComicCategoryFormdataRequestBody = SetComicCategory

// AddComicChapterJSONRequestBody defines body for AddComicChapter for application/json ContentType.
type AddComicChapterJSONRequestBody = NewComicChapter

// AddComicChapterFormdataRequestBody defines body for AddComicChapter for application/x-www-form-urlencoded ContentType.
type AddComicChapterFormdataRequestBody = NewComicChapter

// UpdateComicChapterJSONRequestBody defines body for UpdateComicChapter for application/json ContentType.
type UpdateComicChapterJSONRequestBody = SetComicChapter

// UpdateComicChapterFormdataRequestBody defines body for UpdateComicChapter for application/x-www-form-urlencoded ContentType.
type UpdateComicChapterFormdataRequestBody = SetComicChapter

// AddComicCoverJSONRequestBody defines body for AddComicCover for application/json ContentType.
type AddComicCoverJSONRequestBody = NewComicCover

// AddComicCoverFormdataRequestBody defines body for AddComicCover for application/x-www-form-urlencoded ContentType.
type AddComicCoverFormdataRequestBody = NewComicCover

// UpdateComicCoverJSONRequestBody defines body for UpdateComicCover for application/json ContentType.
type UpdateComicCoverJSONRequestBody = SetComicCover

// UpdateComicCoverFormdataRequestBody defines body for UpdateComicCover for application/x-www-form-urlencoded ContentType.
type UpdateComicCoverFormdataRequestBody = SetComicCover

// AddComicExternalJSONRequestBody defines body for AddComicExternal for application/json ContentType.
type AddComicExternalJSONRequestBody = NewComicExternal

// AddComicExternalFormdataRequestBody defines body for AddComicExternal for application/x-www-form-urlencoded ContentType.
type AddComicExternalFormdataRequestBody = NewComicExternal

// UpdateComicExternalJSONRequestBody defines body for UpdateComicExternal for application/json ContentType.
type UpdateComicExternalJSONRequestBody = SetComicExternal

// UpdateComicExternalFormdataRequestBody defines body for UpdateComicExternal for application/x-www-form-urlencoded ContentType.
type UpdateComicExternalFormdataRequestBody = SetComicExternal

// AddComicRelationJSONRequestBody defines body for AddComicRelation for application/json ContentType.
type AddComicRelationJSONRequestBody = NewComicRelation

// AddComicRelationFormdataRequestBody defines body for AddComicRelation for application/x-www-form-urlencoded ContentType.
type AddComicRelationFormdataRequestBody = NewComicRelation

// UpdateComicRelationJSONRequestBody defines body for UpdateComicRelation for application/json ContentType.
type UpdateComicRelationJSONRequestBody = SetComicRelation

// UpdateComicRelationFormdataRequestBody defines body for UpdateComicRelation for application/x-www-form-urlencoded ContentType.
type UpdateComicRelationFormdataRequestBody = SetComicRelation

// AddComicSynopsisJSONRequestBody defines body for AddComicSynopsis for application/json ContentType.
type AddComicSynopsisJSONRequestBody = NewComicSynopsis

// AddComicSynopsisFormdataRequestBody defines body for AddComicSynopsis for application/x-www-form-urlencoded ContentType.
type AddComicSynopsisFormdataRequestBody = NewComicSynopsis

// UpdateComicSynopsisJSONRequestBody defines body for UpdateComicSynopsis for application/json ContentType.
type UpdateComicSynopsisJSONRequestBody = SetComicSynopsis

// UpdateComicSynopsisFormdataRequestBody defines body for UpdateComicSynopsis for application/x-www-form-urlencoded ContentType.
type UpdateComicSynopsisFormdataRequestBody = SetComicSynopsis

// AddComicTagJSONRequestBody defines body for AddComicTag for application/json ContentType.
type AddComicTagJSONRequestBody = NewComicTag

// AddComicTagFormdataRequestBody defines body for AddComicTag for application/x-www-form-urlencoded ContentType.
type AddComicTagFormdataRequestBody = NewComicTag

// UpdateComicTagJSONRequestBody defines body for UpdateComicTag for application/json ContentType.
type UpdateComicTagJSONRequestBody = SetComicTag

// UpdateComicTagFormdataRequestBody defines body for UpdateComicTag for application/x-www-form-urlencoded ContentType.
type UpdateComicTagFormdataRequestBody = SetComicTag

// AddComicTitleJSONRequestBody defines body for AddComicTitle for application/json ContentType.
type AddComicTitleJSONRequestBody = NewComicTitle

// AddComicTitleFormdataRequestBody defines body for AddComicTitle for application/x-www-form-urlencoded ContentType.
type AddComicTitleFormdataRequestBody = NewComicTitle

// UpdateComicTitleJSONRequestBody defines body for UpdateComicTitle for application/json ContentType.
type UpdateComicTitleJSONRequestBody = SetComicTitle

// UpdateComicTitleFormdataRequestBody defines body for UpdateComicTitle for application/x-www-form-urlencoded ContentType.
type UpdateComicTitleFormdataRequestBody = SetComicTitle

// AddLanguageJSONRequestBody defines body for AddLanguage for application/json ContentType.
type AddLanguageJSONRequestBody = NewLanguage

// AddLanguageFormdataRequestBody defines body for AddLanguage for application/x-www-form-urlencoded ContentType.
type AddLanguageFormdataRequestBody = NewLanguage

// UpdateLanguageJSONRequestBody defines body for UpdateLanguage for application/json ContentType.
type UpdateLanguageJSONRequestBody = SetLanguage

// UpdateLanguageFormdataRequestBody defines body for UpdateLanguage for application/x-www-form-urlencoded ContentType.
type UpdateLanguageFormdataRequestBody = SetLanguage

// AddTagJSONRequestBody defines body for AddTag for application/json ContentType.
type AddTagJSONRequestBody = NewTag

// AddTagFormdataRequestBody defines body for AddTag for application/x-www-form-urlencoded ContentType.
type AddTagFormdataRequestBody = NewTag

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = SetTag

// UpdateTagFormdataRequestBody defines body for UpdateTag for application/x-www-form-urlencoded ContentType.
type UpdateTagFormdataRequestBody = SetTag

// AddCategoryTypeJSONRequestBody defines body for AddCategoryType for application/json ContentType.
type AddCategoryTypeJSONRequestBody = NewGenericType

// AddCategoryTypeFormdataRequestBody defines body for AddCategoryType for application/x-www-form-urlencoded ContentType.
type AddCategoryTypeFormdataRequestBody = NewGenericType

// UpdateCategoryTypeJSONRequestBody defines body for UpdateCategoryType for application/json ContentType.
type UpdateCategoryTypeJSONRequestBody = SetGenericType

// UpdateCategoryTypeFormdataRequestBody defines body for UpdateCategoryType for application/x-www-form-urlencoded ContentType.
type UpdateCategoryTypeFormdataRequestBody = SetGenericType

// AddComicRelationTypeJSONRequestBody defines body for AddComicRelationType for application/json ContentType.
type AddComicRelationTypeJSONRequestBody = NewGenericType

// AddComicRelationTypeFormdataRequestBody defines body for AddComicRelationType for application/x-www-form-urlencoded ContentType.
type AddComicRelationTypeFormdataRequestBody = NewGenericType

// UpdateComicRelationTypeJSONRequestBody defines body for UpdateComicRelationType for application/json ContentType.
type UpdateComicRelationTypeJSONRequestBody = SetGenericType

// UpdateComicRelationTypeFormdataRequestBody defines body for UpdateComicRelationType for application/x-www-form-urlencoded ContentType.
type UpdateComicRelationTypeFormdataRequestBody = SetGenericType

// AddTagTypeJSONRequestBody defines body for AddTagType for application/json ContentType.
type AddTagTypeJSONRequestBody = NewGenericType

// AddTagTypeFormdataRequestBody defines body for AddTagType for application/x-www-form-urlencoded ContentType.
type AddTagTypeFormdataRequestBody = NewGenericType

// UpdateTagTypeJSONRequestBody defines body for UpdateTagType for application/json ContentType.
type UpdateTagTypeJSONRequestBody = SetGenericType

// UpdateTagTypeFormdataRequestBody defines body for UpdateTagType for application/x-www-form-urlencoded ContentType.
type UpdateTagTypeFormdataRequestBody = SetGenericType

// AddWebsiteJSONRequestBody defines body for AddWebsite for application/json ContentType.
type AddWebsiteJSONRequestBody = NewWebsite

// AddWebsiteFormdataRequestBody defines body for AddWebsite for application/x-www-form-urlencoded ContentType.
type AddWebsiteFormdataRequestBody = NewWebsite

// UpdateWebsiteJSONRequestBody defines body for UpdateWebsite for application/json ContentType.
type UpdateWebsiteJSONRequestBody = SetWebsite

// UpdateWebsiteFormdataRequestBody defines body for UpdateWebsite for application/x-www-form-urlencoded ContentType.
type UpdateWebsiteFormdataRequestBody = SetWebsite

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List category.
	// (GET /categories)
	ListCategory(w http.ResponseWriter, r *http.Request, params ListCategoryParams)
	// Add category.
	// (POST /categories)
	AddCategory(w http.ResponseWriter, r *http.Request)
	// Delete category.
	// (DELETE /categories/{typeID}-{code})
	DeleteCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Get category.
	// (GET /categories/{typeID}-{code})
	GetCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Update category.
	// (PATCH /categories/{typeID}-{code})
	UpdateCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Add category relation.
	// (POST /categories/{typeID}-{code}/relations)
	AddCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Delete category relation.
	// (DELETE /categories/{typeID}-{code}/relations/{categoryCode})
	DeleteCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string)
	// Get category relation.
	// (GET /categories/{typeID}-{code}/relations/{categoryCode})
	GetCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string)
	// Update category relation.
	// (PATCH /categories/{typeID}-{code}/relations/{categoryCode})
	UpdateCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string)
	// List comic.
	// (GET /comics)
	ListComic(w http.ResponseWriter, r *http.Request, params ListComicParams)
	// Add comic.
	// (POST /comics)
	AddComic(w http.ResponseWriter, r *http.Request)
	// Delete comic.
	// (DELETE /comics/{code})
	DeleteComic(w http.ResponseWriter, r *http.Request, code string)
	// Get comic.
	// (GET /comics/{code})
	GetComic(w http.ResponseWriter, r *http.Request, code string)
	// Update comic.
	// (PATCH /comics/{code})
	UpdateComic(w http.ResponseWriter, r *http.Request, code string)
	// Add comic category.
	// (POST /comics/{code}/categories)
	AddComicCategory(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic category.
	// (DELETE /comics/{code}/categories/{typeID}-{categoryCode})
	DeleteComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string)
	// Get comic category.
	// (GET /comics/{code}/categories/{typeID}-{categoryCode})
	GetComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string)
	// Update comic category.
	// (PATCH /comics/{code}/categories/{typeID}-{categoryCode})
	UpdateComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string)
	// List comic chapter.
	// (GET /comics/{code}/chapters)
	ListComicChapter(w http.ResponseWriter, r *http.Request, code string, params ListComicChapterParams)
	// Add comic chapter.
	// (POST /comics/{code}/chapters)
	AddComicChapter(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic chapter.
	// (DELETE /comics/{code}/chapters/{cv})
	DeleteComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Get comic chapter.
	// (GET /comics/{code}/chapters/{cv})
	GetComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Update comic chapter.
	// (PATCH /comics/{code}/chapters/{cv})
	UpdateComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string)
	// Add comic cover.
	// (POST /comics/{code}/covers)
	AddComicCover(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic cover.
	// (DELETE /comics/{code}/covers/{rid})
	DeleteComicCover(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Get comic cover.
	// (GET /comics/{code}/covers/{rid})
	GetComicCover(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Update comic cover.
	// (PATCH /comics/{code}/covers/{rid})
	UpdateComicCover(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Add comic external.
	// (POST /comics/{code}/externals)
	AddComicExternal(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic external.
	// (DELETE /comics/{code}/externals/{rid})
	DeleteComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Get comic external.
	// (GET /comics/{code}/externals/{rid})
	GetComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Update comic external.
	// (PATCH /comics/{code}/externals/{rid})
	UpdateComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Add comic relation.
	// (POST /comics/{code}/relations)
	AddComicRelation(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic relation.
	// (DELETE /comics/{code}/relations/{typeID}-{comicCode})
	DeleteComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string)
	// Get comic relation.
	// (GET /comics/{code}/relations/{typeID}-{comicCode})
	GetComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string)
	// Update comic relation.
	// (PATCH /comics/{code}/relations/{typeID}-{comicCode})
	UpdateComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string)
	// Add comic synopsis.
	// (POST /comics/{code}/synopses)
	AddComicSynopsis(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic synopsis.
	// (DELETE /comics/{code}/synopses/{rid})
	DeleteComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Get comic synopsis.
	// (GET /comics/{code}/synopses/{rid})
	GetComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Update comic synopsis.
	// (PATCH /comics/{code}/synopses/{rid})
	UpdateComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Add comic tag.
	// (POST /comics/{code}/tags)
	AddComicTag(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic tag.
	// (DELETE /comics/{code}/tags/{typeID}-{tagCode})
	DeleteComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string)
	// Get comic tag.
	// (GET /comics/{code}/tags/{typeID}-{tagCode})
	GetComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string)
	// Update comic tag.
	// (PATCH /comics/{code}/tags/{typeID}-{tagCode})
	UpdateComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string)
	// Add comic title.
	// (POST /comics/{code}/titles)
	AddComicTitle(w http.ResponseWriter, r *http.Request, code string)
	// Delete comic title.
	// (DELETE /comics/{code}/titles/{rid})
	DeleteComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Get comic title.
	// (GET /comics/{code}/titles/{rid})
	GetComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string)
	// Update comic title.
	// (PATCH /comics/{code}/titles/{rid})
	UpdateComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string)
	// List language.
	// (GET /languages)
	ListLanguage(w http.ResponseWriter, r *http.Request, params ListLanguageParams)
	// Add language.
	// (POST /languages)
	AddLanguage(w http.ResponseWriter, r *http.Request)
	// Delete language.
	// (DELETE /languages/{ietf})
	DeleteLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// Get language.
	// (GET /languages/{ietf})
	GetLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// Update language.
	// (PATCH /languages/{ietf})
	UpdateLanguage(w http.ResponseWriter, r *http.Request, ietf string)
	// List tag.
	// (GET /tags)
	ListTag(w http.ResponseWriter, r *http.Request, params ListTagParams)
	// Add tag.
	// (POST /tags)
	AddTag(w http.ResponseWriter, r *http.Request)
	// Delete tag.
	// (DELETE /tags/{typeID}-{code})
	DeleteTag(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Get tag.
	// (GET /tags/{typeID}-{code})
	GetTag(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// Update tag.
	// (PATCH /tags/{typeID}-{code})
	UpdateTag(w http.ResponseWriter, r *http.Request, typeID uint, code string)
	// List category type.
	// (GET /types/categories)
	ListCategoryType(w http.ResponseWriter, r *http.Request, params ListCategoryTypeParams)
	// Add category type.
	// (POST /types/categories)
	AddCategoryType(w http.ResponseWriter, r *http.Request)
	// Delete category type.
	// (DELETE /types/categories/{code})
	DeleteCategoryType(w http.ResponseWriter, r *http.Request, code string)
	// Get category type.
	// (GET /types/categories/{code})
	GetCategoryType(w http.ResponseWriter, r *http.Request, code string)
	// Update category type.
	// (PATCH /types/categories/{code})
	UpdateCategoryType(w http.ResponseWriter, r *http.Request, code string)
	// List comic relation type.
	// (GET /types/comic-relations)
	ListComicRelationType(w http.ResponseWriter, r *http.Request, params ListComicRelationTypeParams)
	// Add comic relation type.
	// (POST /types/comic-relations)
	AddComicRelationType(w http.ResponseWriter, r *http.Request)
	// Delete comic relation type.
	// (DELETE /types/comic-relations/{code})
	DeleteComicRelationType(w http.ResponseWriter, r *http.Request, code string)
	// Get comic relation type.
	// (GET /types/comic-relations/{code})
	GetComicRelationType(w http.ResponseWriter, r *http.Request, code string)
	// Update comic relation type.
	// (PATCH /types/comic-relations/{code})
	UpdateComicRelationType(w http.ResponseWriter, r *http.Request, code string)
	// List tag type.
	// (GET /types/tags)
	ListTagType(w http.ResponseWriter, r *http.Request, params ListTagTypeParams)
	// Add tag type.
	// (POST /types/tags)
	AddTagType(w http.ResponseWriter, r *http.Request)
	// Delete tag type.
	// (DELETE /types/tags/{code})
	DeleteTagType(w http.ResponseWriter, r *http.Request, code string)
	// Get tag type.
	// (GET /types/tags/{code})
	GetTagType(w http.ResponseWriter, r *http.Request, code string)
	// Update tag type.
	// (PATCH /types/tags/{code})
	UpdateTagType(w http.ResponseWriter, r *http.Request, code string)
	// List website.
	// (GET /websites)
	ListWebsite(w http.ResponseWriter, r *http.Request, params ListWebsiteParams)
	// Add website.
	// (POST /websites)
	AddWebsite(w http.ResponseWriter, r *http.Request)
	// Delete website.
	// (DELETE /websites/{domain})
	DeleteWebsite(w http.ResponseWriter, r *http.Request, domain string)
	// Get website.
	// (GET /websites/{domain})
	GetWebsite(w http.ResponseWriter, r *http.Request, domain string)
	// Update website.
	// (PATCH /websites/{domain})
	UpdateWebsite(w http.ResponseWriter, r *http.Request, domain string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List category.
// (GET /categories)
func (_ Unimplemented) ListCategory(w http.ResponseWriter, r *http.Request, params ListCategoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add category.
// (POST /categories)
func (_ Unimplemented) AddCategory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete category.
// (DELETE /categories/{typeID}-{code})
func (_ Unimplemented) DeleteCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get category.
// (GET /categories/{typeID}-{code})
func (_ Unimplemented) GetCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update category.
// (PATCH /categories/{typeID}-{code})
func (_ Unimplemented) UpdateCategory(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add category relation.
// (POST /categories/{typeID}-{code}/relations)
func (_ Unimplemented) AddCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete category relation.
// (DELETE /categories/{typeID}-{code}/relations/{categoryCode})
func (_ Unimplemented) DeleteCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get category relation.
// (GET /categories/{typeID}-{code}/relations/{categoryCode})
func (_ Unimplemented) GetCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update category relation.
// (PATCH /categories/{typeID}-{code}/relations/{categoryCode})
func (_ Unimplemented) UpdateCategoryRelation(w http.ResponseWriter, r *http.Request, typeID uint, code string, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List comic.
// (GET /comics)
func (_ Unimplemented) ListComic(w http.ResponseWriter, r *http.Request, params ListComicParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic.
// (POST /comics)
func (_ Unimplemented) AddComic(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic.
// (DELETE /comics/{code})
func (_ Unimplemented) DeleteComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic.
// (GET /comics/{code})
func (_ Unimplemented) GetComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic.
// (PATCH /comics/{code})
func (_ Unimplemented) UpdateComic(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic category.
// (POST /comics/{code}/categories)
func (_ Unimplemented) AddComicCategory(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic category.
// (DELETE /comics/{code}/categories/{typeID}-{categoryCode})
func (_ Unimplemented) DeleteComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic category.
// (GET /comics/{code}/categories/{typeID}-{categoryCode})
func (_ Unimplemented) GetComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic category.
// (PATCH /comics/{code}/categories/{typeID}-{categoryCode})
func (_ Unimplemented) UpdateComicCategory(w http.ResponseWriter, r *http.Request, code string, typeID uint, categoryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List comic chapter.
// (GET /comics/{code}/chapters)
func (_ Unimplemented) ListComicChapter(w http.ResponseWriter, r *http.Request, code string, params ListComicChapterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic chapter.
// (POST /comics/{code}/chapters)
func (_ Unimplemented) AddComicChapter(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic chapter.
// (DELETE /comics/{code}/chapters/{cv})
func (_ Unimplemented) DeleteComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic chapter.
// (GET /comics/{code}/chapters/{cv})
func (_ Unimplemented) GetComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic chapter.
// (PATCH /comics/{code}/chapters/{cv})
func (_ Unimplemented) UpdateComicChapter(w http.ResponseWriter, r *http.Request, code string, cv string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic cover.
// (POST /comics/{code}/covers)
func (_ Unimplemented) AddComicCover(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic cover.
// (DELETE /comics/{code}/covers/{rid})
func (_ Unimplemented) DeleteComicCover(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic cover.
// (GET /comics/{code}/covers/{rid})
func (_ Unimplemented) GetComicCover(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic cover.
// (PATCH /comics/{code}/covers/{rid})
func (_ Unimplemented) UpdateComicCover(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic external.
// (POST /comics/{code}/externals)
func (_ Unimplemented) AddComicExternal(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic external.
// (DELETE /comics/{code}/externals/{rid})
func (_ Unimplemented) DeleteComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic external.
// (GET /comics/{code}/externals/{rid})
func (_ Unimplemented) GetComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic external.
// (PATCH /comics/{code}/externals/{rid})
func (_ Unimplemented) UpdateComicExternal(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic relation.
// (POST /comics/{code}/relations)
func (_ Unimplemented) AddComicRelation(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic relation.
// (DELETE /comics/{code}/relations/{typeID}-{comicCode})
func (_ Unimplemented) DeleteComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic relation.
// (GET /comics/{code}/relations/{typeID}-{comicCode})
func (_ Unimplemented) GetComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic relation.
// (PATCH /comics/{code}/relations/{typeID}-{comicCode})
func (_ Unimplemented) UpdateComicRelation(w http.ResponseWriter, r *http.Request, code string, typeID uint, comicCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic synopsis.
// (POST /comics/{code}/synopses)
func (_ Unimplemented) AddComicSynopsis(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic synopsis.
// (DELETE /comics/{code}/synopses/{rid})
func (_ Unimplemented) DeleteComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic synopsis.
// (GET /comics/{code}/synopses/{rid})
func (_ Unimplemented) GetComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic synopsis.
// (PATCH /comics/{code}/synopses/{rid})
func (_ Unimplemented) UpdateComicSynopsis(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic tag.
// (POST /comics/{code}/tags)
func (_ Unimplemented) AddComicTag(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic tag.
// (DELETE /comics/{code}/tags/{typeID}-{tagCode})
func (_ Unimplemented) DeleteComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic tag.
// (GET /comics/{code}/tags/{typeID}-{tagCode})
func (_ Unimplemented) GetComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic tag.
// (PATCH /comics/{code}/tags/{typeID}-{tagCode})
func (_ Unimplemented) UpdateComicTag(w http.ResponseWriter, r *http.Request, code string, typeID uint, tagCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic title.
// (POST /comics/{code}/titles)
func (_ Unimplemented) AddComicTitle(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic title.
// (DELETE /comics/{code}/titles/{rid})
func (_ Unimplemented) DeleteComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic title.
// (GET /comics/{code}/titles/{rid})
func (_ Unimplemented) GetComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic title.
// (PATCH /comics/{code}/titles/{rid})
func (_ Unimplemented) UpdateComicTitle(w http.ResponseWriter, r *http.Request, code string, rid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List language.
// (GET /languages)
func (_ Unimplemented) ListLanguage(w http.ResponseWriter, r *http.Request, params ListLanguageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add language.
// (POST /languages)
func (_ Unimplemented) AddLanguage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete language.
// (DELETE /languages/{ietf})
func (_ Unimplemented) DeleteLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get language.
// (GET /languages/{ietf})
func (_ Unimplemented) GetLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update language.
// (PATCH /languages/{ietf})
func (_ Unimplemented) UpdateLanguage(w http.ResponseWriter, r *http.Request, ietf string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tag.
// (GET /tags)
func (_ Unimplemented) ListTag(w http.ResponseWriter, r *http.Request, params ListTagParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add tag.
// (POST /tags)
func (_ Unimplemented) AddTag(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete tag.
// (DELETE /tags/{typeID}-{code})
func (_ Unimplemented) DeleteTag(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tag.
// (GET /tags/{typeID}-{code})
func (_ Unimplemented) GetTag(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update tag.
// (PATCH /tags/{typeID}-{code})
func (_ Unimplemented) UpdateTag(w http.ResponseWriter, r *http.Request, typeID uint, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List category type.
// (GET /types/categories)
func (_ Unimplemented) ListCategoryType(w http.ResponseWriter, r *http.Request, params ListCategoryTypeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add category type.
// (POST /types/categories)
func (_ Unimplemented) AddCategoryType(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete category type.
// (DELETE /types/categories/{code})
func (_ Unimplemented) DeleteCategoryType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get category type.
// (GET /types/categories/{code})
func (_ Unimplemented) GetCategoryType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update category type.
// (PATCH /types/categories/{code})
func (_ Unimplemented) UpdateCategoryType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List comic relation type.
// (GET /types/comic-relations)
func (_ Unimplemented) ListComicRelationType(w http.ResponseWriter, r *http.Request, params ListComicRelationTypeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add comic relation type.
// (POST /types/comic-relations)
func (_ Unimplemented) AddComicRelationType(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete comic relation type.
// (DELETE /types/comic-relations/{code})
func (_ Unimplemented) DeleteComicRelationType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comic relation type.
// (GET /types/comic-relations/{code})
func (_ Unimplemented) GetComicRelationType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update comic relation type.
// (PATCH /types/comic-relations/{code})
func (_ Unimplemented) UpdateComicRelationType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tag type.
// (GET /types/tags)
func (_ Unimplemented) ListTagType(w http.ResponseWriter, r *http.Request, params ListTagTypeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add tag type.
// (POST /types/tags)
func (_ Unimplemented) AddTagType(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete tag type.
// (DELETE /types/tags/{code})
func (_ Unimplemented) DeleteTagType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tag type.
// (GET /types/tags/{code})
func (_ Unimplemented) GetTagType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update tag type.
// (PATCH /types/tags/{code})
func (_ Unimplemented) UpdateTagType(w http.ResponseWriter, r *http.Request, code string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List website.
// (GET /websites)
func (_ Unimplemented) ListWebsite(w http.ResponseWriter, r *http.Request, params ListWebsiteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add website.
// (POST /websites)
func (_ Unimplemented) AddWebsite(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete website.
// (DELETE /websites/{domain})
func (_ Unimplemented) DeleteWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get website.
// (GET /websites/{domain})
func (_ Unimplemented) GetWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update website.
// (PATCH /websites/{domain})
func (_ Unimplemented) UpdateWebsite(w http.ResponseWriter, r *http.Request, domain string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCategory operation middleware
func (siw *ServerInterfaceWrapper) ListCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCategoryParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCategory(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCategory operation middleware
func (siw *ServerInterfaceWrapper) AddCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCategory(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategory operation middleware
func (siw *ServerInterfaceWrapper) GetCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategory(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCategory(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCategoryRelation operation middleware
func (siw *ServerInterfaceWrapper) AddCategoryRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCategoryRelation(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCategoryRelation operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoryRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategoryRelation(w, r, typeID, code, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategoryRelation operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategoryRelation(w, r, typeID, code, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCategoryRelation operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategoryRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCategoryRelation(w, r, typeID, code, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListComic operation middleware
func (siw *ServerInterfaceWrapper) ListComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComicParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "comic_external" -------------

	err = runtime.BindQueryParameter("form", true, false, "comic_external", r.URL.Query(), &params.ComicExternal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comic_external", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComic(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComic operation middleware
func (siw *ServerInterfaceWrapper) AddComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComic(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComic operation middleware
func (siw *ServerInterfaceWrapper) DeleteComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComic operation middleware
func (siw *ServerInterfaceWrapper) GetComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComic operation middleware
func (siw *ServerInterfaceWrapper) UpdateComic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComic(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicCategory operation middleware
func (siw *ServerInterfaceWrapper) AddComicCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicCategory(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicCategory(w, r, code, typeID, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicCategory operation middleware
func (siw *ServerInterfaceWrapper) GetComicCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicCategory(w, r, code, typeID, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "categoryCode" -------------
	var categoryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryCode", runtime.ParamLocationPath, chi.URLParam(r, "categoryCode"), &categoryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicCategory(w, r, code, typeID, categoryCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListComicChapter operation middleware
func (siw *ServerInterfaceWrapper) ListComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComicChapterParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComicChapter(w, r, code, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicChapter operation middleware
func (siw *ServerInterfaceWrapper) AddComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicChapter(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicChapter operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicChapter operation middleware
func (siw *ServerInterfaceWrapper) GetComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicChapter operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicChapter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "cv" -------------
	var cv string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cv", runtime.ParamLocationPath, chi.URLParam(r, "cv"), &cv)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cv", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicChapter(w, r, code, cv)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicCover operation middleware
func (siw *ServerInterfaceWrapper) AddComicCover(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicCover(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicCover operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicCover(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicCover(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicCover operation middleware
func (siw *ServerInterfaceWrapper) GetComicCover(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicCover(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicCover operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicCover(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicCover(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicExternal operation middleware
func (siw *ServerInterfaceWrapper) AddComicExternal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicExternal(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicExternal operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicExternal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicExternal(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicExternal operation middleware
func (siw *ServerInterfaceWrapper) GetComicExternal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicExternal(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicExternal operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicExternal(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicExternal(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicRelation operation middleware
func (siw *ServerInterfaceWrapper) AddComicRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicRelation(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicRelation operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "comicCode" -------------
	var comicCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "comicCode", runtime.ParamLocationPath, chi.URLParam(r, "comicCode"), &comicCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comicCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicRelation(w, r, code, typeID, comicCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicRelation operation middleware
func (siw *ServerInterfaceWrapper) GetComicRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "comicCode" -------------
	var comicCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "comicCode", runtime.ParamLocationPath, chi.URLParam(r, "comicCode"), &comicCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comicCode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicRelation(w, r, code, typeID, comicCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicRelation operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicRelation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "comicCode" -------------
	var comicCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "comicCode", runtime.ParamLocationPath, chi.URLParam(r, "comicCode"), &comicCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comicCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicRelation(w, r, code, typeID, comicCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicSynopsis operation middleware
func (siw *ServerInterfaceWrapper) AddComicSynopsis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicSynopsis(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicSynopsis operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicSynopsis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicSynopsis(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicSynopsis operation middleware
func (siw *ServerInterfaceWrapper) GetComicSynopsis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicSynopsis(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicSynopsis operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicSynopsis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicSynopsis(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicTag operation middleware
func (siw *ServerInterfaceWrapper) AddComicTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicTag(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "tagCode" -------------
	var tagCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagCode", runtime.ParamLocationPath, chi.URLParam(r, "tagCode"), &tagCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicTag(w, r, code, typeID, tagCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicTag operation middleware
func (siw *ServerInterfaceWrapper) GetComicTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "tagCode" -------------
	var tagCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagCode", runtime.ParamLocationPath, chi.URLParam(r, "tagCode"), &tagCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagCode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicTag(w, r, code, typeID, tagCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "tagCode" -------------
	var tagCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagCode", runtime.ParamLocationPath, chi.URLParam(r, "tagCode"), &tagCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagCode", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicTag(w, r, code, typeID, tagCode)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicTitle operation middleware
func (siw *ServerInterfaceWrapper) AddComicTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicTitle(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicTitle operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicTitle(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicTitle operation middleware
func (siw *ServerInterfaceWrapper) GetComicTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicTitle(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicTitle operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Path parameter "rid" -------------
	var rid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "rid", runtime.ParamLocationPath, chi.URLParam(r, "rid"), &rid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicTitle(w, r, code, rid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLanguage operation middleware
func (siw *ServerInterfaceWrapper) ListLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLanguageParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLanguage(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddLanguage operation middleware
func (siw *ServerInterfaceWrapper) AddLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLanguage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLanguage operation middleware
func (siw *ServerInterfaceWrapper) DeleteLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLanguage operation middleware
func (siw *ServerInterfaceWrapper) GetLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLanguage operation middleware
func (siw *ServerInterfaceWrapper) UpdateLanguage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ietf" -------------
	var ietf string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ietf", runtime.ParamLocationPath, chi.URLParam(r, "ietf"), &ietf)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ietf", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLanguage(w, r, ietf)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTag operation middleware
func (siw *ServerInterfaceWrapper) ListTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTag(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTag operation middleware
func (siw *ServerInterfaceWrapper) AddTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTag(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTag(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTag operation middleware
func (siw *ServerInterfaceWrapper) GetTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTag(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "typeID" -------------
	var typeID uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeID", runtime.ParamLocationPath, chi.URLParam(r, "typeID"), &typeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typeID", Err: err})
		return
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTag(w, r, typeID, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCategoryType operation middleware
func (siw *ServerInterfaceWrapper) ListCategoryType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCategoryTypeParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCategoryType(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddCategoryType operation middleware
func (siw *ServerInterfaceWrapper) AddCategoryType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCategoryType(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCategoryType operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoryType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategoryType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategoryType operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategoryType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCategoryType operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategoryType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCategoryType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListComicRelationType operation middleware
func (siw *ServerInterfaceWrapper) ListComicRelationType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComicRelationTypeParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComicRelationType(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddComicRelationType operation middleware
func (siw *ServerInterfaceWrapper) AddComicRelationType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComicRelationType(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComicRelationType operation middleware
func (siw *ServerInterfaceWrapper) DeleteComicRelationType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComicRelationType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetComicRelationType operation middleware
func (siw *ServerInterfaceWrapper) GetComicRelationType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComicRelationType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComicRelationType operation middleware
func (siw *ServerInterfaceWrapper) UpdateComicRelationType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComicRelationType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTagType operation middleware
func (siw *ServerInterfaceWrapper) ListTagType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagTypeParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTagType(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTagType operation middleware
func (siw *ServerInterfaceWrapper) AddTagType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTagType(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTagType operation middleware
func (siw *ServerInterfaceWrapper) DeleteTagType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTagType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTagType operation middleware
func (siw *ServerInterfaceWrapper) GetTagType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTagType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTagType operation middleware
func (siw *ServerInterfaceWrapper) UpdateTagType(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, chi.URLParam(r, "code"), &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTagType(w, r, code)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebsite operation middleware
func (siw *ServerInterfaceWrapper) ListWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebsiteParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebsite(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddWebsite operation middleware
func (siw *ServerInterfaceWrapper) AddWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddWebsite(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWebsite operation middleware
func (siw *ServerInterfaceWrapper) DeleteWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebsite operation middleware
func (siw *ServerInterfaceWrapper) GetWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateWebsite operation middleware
func (siw *ServerInterfaceWrapper) UpdateWebsite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithLocation("simple", false, "domain", runtime.ParamLocationPath, chi.URLParam(r, "domain"), &domain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWebsite(w, r, domain)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories", wrapper.ListCategory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/categories", wrapper.AddCategory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/categories/{typeID}-{code}", wrapper.DeleteCategory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories/{typeID}-{code}", wrapper.GetCategory)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/categories/{typeID}-{code}", wrapper.UpdateCategory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/categories/{typeID}-{code}/relations", wrapper.AddCategoryRelation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/categories/{typeID}-{code}/relations/{categoryCode}", wrapper.DeleteCategoryRelation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories/{typeID}-{code}/relations/{categoryCode}", wrapper.GetCategoryRelation)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/categories/{typeID}-{code}/relations/{categoryCode}", wrapper.UpdateCategoryRelation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics", wrapper.ListComic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics", wrapper.AddComic)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}", wrapper.DeleteComic)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}", wrapper.GetComic)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}", wrapper.UpdateComic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/categories", wrapper.AddComicCategory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/categories/{typeID}-{categoryCode}", wrapper.DeleteComicCategory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/categories/{typeID}-{categoryCode}", wrapper.GetComicCategory)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/categories/{typeID}-{categoryCode}", wrapper.UpdateComicCategory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/chapters", wrapper.ListComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/chapters", wrapper.AddComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.DeleteComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.GetComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/chapters/{cv}", wrapper.UpdateComicChapter)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/covers", wrapper.AddComicCover)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/covers/{rid}", wrapper.DeleteComicCover)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/covers/{rid}", wrapper.GetComicCover)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/covers/{rid}", wrapper.UpdateComicCover)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/externals", wrapper.AddComicExternal)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/externals/{rid}", wrapper.DeleteComicExternal)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/externals/{rid}", wrapper.GetComicExternal)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/externals/{rid}", wrapper.UpdateComicExternal)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/relations", wrapper.AddComicRelation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/relations/{typeID}-{comicCode}", wrapper.DeleteComicRelation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/relations/{typeID}-{comicCode}", wrapper.GetComicRelation)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/relations/{typeID}-{comicCode}", wrapper.UpdateComicRelation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/synopses", wrapper.AddComicSynopsis)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/synopses/{rid}", wrapper.DeleteComicSynopsis)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/synopses/{rid}", wrapper.GetComicSynopsis)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/synopses/{rid}", wrapper.UpdateComicSynopsis)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/tags", wrapper.AddComicTag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/tags/{typeID}-{tagCode}", wrapper.DeleteComicTag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/tags/{typeID}-{tagCode}", wrapper.GetComicTag)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/tags/{typeID}-{tagCode}", wrapper.UpdateComicTag)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/comics/{code}/titles", wrapper.AddComicTitle)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comics/{code}/titles/{rid}", wrapper.DeleteComicTitle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comics/{code}/titles/{rid}", wrapper.GetComicTitle)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comics/{code}/titles/{rid}", wrapper.UpdateComicTitle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages", wrapper.ListLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/languages", wrapper.AddLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/languages/{ietf}", wrapper.DeleteLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/languages/{ietf}", wrapper.GetLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/languages/{ietf}", wrapper.UpdateLanguage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTag)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tags", wrapper.AddTag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tags/{typeID}-{code}", wrapper.DeleteTag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags/{typeID}-{code}", wrapper.GetTag)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tags/{typeID}-{code}", wrapper.UpdateTag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/categories", wrapper.ListCategoryType)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/types/categories", wrapper.AddCategoryType)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/types/categories/{code}", wrapper.DeleteCategoryType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/categories/{code}", wrapper.GetCategoryType)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/types/categories/{code}", wrapper.UpdateCategoryType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/comic-relations", wrapper.ListComicRelationType)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/types/comic-relations", wrapper.AddComicRelationType)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/types/comic-relations/{code}", wrapper.DeleteComicRelationType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/comic-relations/{code}", wrapper.GetComicRelationType)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/types/comic-relations/{code}", wrapper.UpdateComicRelationType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/tags", wrapper.ListTagType)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/types/tags", wrapper.AddTagType)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/types/tags/{code}", wrapper.DeleteTagType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types/tags/{code}", wrapper.GetTagType)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/types/tags/{code}", wrapper.UpdateTagType)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/websites", wrapper.ListWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/websites", wrapper.AddWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/websites/{domain}", wrapper.DeleteWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/websites/{domain}", wrapper.GetWebsite)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/websites/{domain}", wrapper.UpdateWebsite)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
